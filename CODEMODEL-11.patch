Index: codemodel/src/main/java/com/sun/codemodel/JClass.java
===================================================================
--- codemodel/src/main/java/com/sun/codemodel/JClass.java	(revision 326)
+++ codemodel/src/main/java/com/sun/codemodel/JClass.java	(working copy)
@@ -316,6 +316,15 @@
     }
 
     /**
+     * Create "? super T" from T
+     *
+     * @return never null
+     */
+    public final JClass superWildcard() {
+        return new JTypeWildcard(this, true);
+    }
+
+    /**
      * Substitutes the type variables with their actual arguments.
      * 
      * <p>
Index: codemodel/src/main/java/com/sun/codemodel/JTypeWildcard.java
===================================================================
--- codemodel/src/main/java/com/sun/codemodel/JTypeWildcard.java	(revision 326)
+++ codemodel/src/main/java/com/sun/codemodel/JTypeWildcard.java	(working copy)
@@ -44,13 +44,11 @@
 import java.util.List;
 
 /**
- * Represents a wildcard type like "? extends Foo".
+ * Represents a wildcard type like "? extends Foo" or "? super Foo".
  *
  * <p>
  * Instances of this class can be obtained from {@link JClass#wildcard()}
  *
- * TODO: extend this to cover "? super Integer".
- *
  * <p>
  * Our modeling of types are starting to look really ugly.
  * ideally it should have been done somewhat like APT,
@@ -61,18 +59,24 @@
 final class JTypeWildcard extends JClass {
 
     private final JClass bound;
+    private final boolean _super;
 
-    JTypeWildcard(JClass bound) {
+    JTypeWildcard(JClass bound, boolean _super) {
         super(bound.owner());
         this.bound = bound;
+        this._super = _super;
     }
 
+    JTypeWildcard(JClass bound) {
+        this(bound, false);
+    }
+
     public String name() {
-        return "? extends "+bound.name();
+        return _super ? "? super " + bound.name() : "? extends " + bound.name();
     }
 
     public String fullName() {
-        return "? extends "+bound.fullName();
+        return _super ? "? super " + bound.fullName() : "? extends " + bound.fullName();
     }
 
     public JPackage _package() {
@@ -112,11 +116,13 @@
         if(nb==bound)
             return this;
         else
-            return new JTypeWildcard(nb);
+            return new JTypeWildcard(nb, _super);
     }
 
     public void generate(JFormatter f) {
-        if(bound._extends()==null)
+        if (_super)
+            f.p("? super").g(bound);
+        else if(bound._extends()==null)
             f.p("?");   // instead of "? extends Object"
         else
             f.p("? extends").g(bound);
